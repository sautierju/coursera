###########################################################################################
###########################################################################################
###########################################################################################
###########################################################################################

#Setup: - Define end Date (BBG Index data end point)
#       - Define FactSet Alpha Testing File input
#       - FactSet file:
#           -AT: Model: Client/Investment_engineers/Msci_index/Europe/MSCI_EU_StyleValuation
#           -Download file as: 
#

#Processing:
#       (1) Download MSCI Index EQ Style Return and Calculate XS Return over periods
#       (2) Download ETF Inflow and calculate Cumulative Sum of Inflow over specified period
#       (3) Calculate EQ Q1/Q5 Style Metrics over time (with Factset input)
#       (4) Calculate Boxplot of historical EQ Style Valuation over time (with Factset input)
#       (5) Calculate Historical EQ Style Valuation (with Factset input)
#       (6) Calculate Kendall Rank Correlation (with Factset input)
#       (7) Plot Agg Graphs and save as pdf

###########################################################################################
###########################################################################################
###########################################################################################
###########################################################################################

  ###################################
  ###################################
    ###
    ### Setup:
    ###
      library(xlsx)
      library(Rblpapi)
      library(plyr)
      library(ggplot2)
      library(reshape2)
      library(xts)
      library(TTR)
  
        endDate = Sys.Date()-1
        
        setwd("S:/BRUSSELS/MANUFACTURING/COREINVENG/Personal/Julien/15 - Style Valuation/")
        data<-read.csv(file="MSCI_EU_STYLEVALUATION_FullHist.txt",sep=";",header = TRUE)             
        
        data<-data[,c("Identifier","Name","Period..YYYYMMDD.","Universe.Returns","GICS_Sector_Name","Quality.ZSCORE","Quality.ZSCORE..Fractiles.","Value.ZSCORE","Value.ZSCORE..Fractiles.",
                      "Volatility.ZSCORE_R","Volatility.ZSCORE_R..Fractiles.","MOM.ZSCORE","MOM.ZSCORE..Fractiles.","Size.ZSCORE_R","Size.ZSCORE_R..Fractiles.","Growth.ZSCORE",
                      "Growth.ZSCORE..Fractiles.","Factors.Combination","Factors.Combination..Fractiles.","Price...Earns.Ratio","PE_ZSCORE","Price...Book.Value","PB_ZSCORE",
                      "Div.Yield","DVDYield_ZSCORE","Price..Sales.CFY","PSales_ZSCORE","ZSCORE_Valuation","ROA","PER","avgVOL","pMOM","Mkcap","gEPS")]
        
        colnames(data) <- c("Identifier","Name","Date","Returns","GICS",
                            "Quality_Z","Quality_F","Value_Z","Value_F",
                            "Volatility_Z","Volatility_F","MOM_Z","MOM_F",
                            "Size_Z","Size_F","Growth_Z","Growth_F","Comb_Z",
                            "Comb_F","PE_Ratio","PE_Zscore","PB_Ratio","PB_Zscore",
                            "DVDYield_Ratio","DVDYield_Zscore","PSales_Ratio","PSales_ZSCORE",
                            "Valuation_ZSCORE","ROA","PER","avgVOL","pMOM","Mkcap","gEPS")

        
        data$Date<-as.character(data$Date)
        data$Date<-as.Date(data$Date,"%Y%m%d")
    ###
    ###
    ###
  ###################################
  ###################################


    ### 
    ### (1) Index Performance and Rolling XS Stdev
    ###
      calc_BBG_PerfStyle <- function(SD,ED){

        
        blpConnect()
        opt <- c("periodicitySelection"="MONTHLY","currency"="EUR")
        
        
        MSCI_Index <- bdh("M7EU Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)
        MSCI_Index[,3] <- bdh("MXEU000V Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #value
        MSCI_Index[,4] <- bdh("M7EUQU Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2]   #quality
        MSCI_Index[,5] <- bdh("M3EUMINV Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #min vol
        MSCI_Index[,6] <- bdh("M7EUSC Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2]   #small
        MSCI_Index[,7] <- bdh("MAEUMMT Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2]  #momentum
        MSCI_Index[,8] <- bdh("MXEU000G Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #growth
        
          colnames(MSCI_Index)<-c("date","Market","Value","Quality","MinVol","Small","Momentum","Growth")
          MSCI_Index <- xts(MSCI_Index[,2:8],order.by = MSCI_Index$date,frequency = "monthly")
          
      
          Roll_Ret_1M <- ROC(MSCI_Index,n=1,type="discrete")
          Roll_Ret_XS_1M <-sweep(Roll_Ret_1M[,2:7],1,Roll_Ret_1M[,1],"-")
          
            Cum_12M_XS <- Roll_Ret_1M[(nrow(Roll_Ret_1M)-12):nrow(Roll_Ret_1M),]
            Cum_12M_XS[1,] <- 0
            Cum_12M_XS <- cumprod(1+Cum_12M_XS)
            Cum_12M_XS <- sweep(Cum_12M_XS[,2:7],1,Cum_12M_XS[,1],"-")
            Cum_12M_XS <- as.data.frame(Cum_12M_XS)
            Cum_12M_XS$Date <- as.Date(rownames(Cum_12M_XS))
            Cum_12M_XS_melt <- melt(Cum_12M_XS,id.vars="Date")
            
            Cum_XS_1Y <- ggplot(data=Cum_12M_XS_melt,aes(x=Date,y=value,group=variable,color=variable))+
                            geom_line(size=1)+scale_colour_brewer(palette="Set2")+
                            scale_x_date(date_labels="%m-%Y",date_breaks="1 month")+
                            ggtitle("1Y Cumulative XS Return vs MSCI Europe (%)")+
                            theme(plot.title = element_text(size = 13, face = "bold"))+
                            theme(text=element_text(family="Times"))
            
            Cum_36M_XS <- Roll_Ret_1M[(nrow(Roll_Ret_1M)-36):nrow(Roll_Ret_1M),]
            Cum_36M_XS[1,] <- 0
            Cum_36M_XS <- cumprod(1+Cum_36M_XS)
            Cum_36M_XS <- sweep(Cum_36M_XS[,2:7],1,Cum_36M_XS[,1],"-")
            Cum_36M_XS <- as.data.frame(Cum_36M_XS)
            Cum_36M_XS$Date <- as.Date(rownames(Cum_36M_XS))
            Cum_36M_XS_melt <- melt(Cum_36M_XS,id.vars="Date")
            
            Cum_XS_3Y <- ggplot(data=Cum_36M_XS_melt,aes(x=Date,y=value,group=variable,color=variable))+
              geom_line(size=1)+scale_colour_brewer(palette="Set2")+
              theme(strip.background = element_rect(fill="#085A93"))+
              theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
              scale_x_date(date_labels="%m-%Y",date_breaks="6 months")+
              ggtitle("3Y Cumulative XS Return vs MSCI Europe (%)")+
              theme(plot.title = element_text(size = 13, face = "bold"))+
              theme(text=element_text(family="Times"))
            
            
            Cum_60M_XS <- Roll_Ret_1M[(nrow(Roll_Ret_1M)-60):nrow(Roll_Ret_1M),]
            Cum_60M_XS[1,] <- 0
            Cum_60M_XS <- cumprod(1+Cum_60M_XS)
            Cum_60M_XS <- sweep(Cum_60M_XS[,2:7],1,Cum_60M_XS[,1],"-")
            Cum_60M_XS <- as.data.frame(Cum_60M_XS)
            Cum_60M_XS$Date <- as.Date(rownames(Cum_60M_XS))
            Cum_60M_XS_melt <- melt(Cum_60M_XS,id.vars="Date")
            
            Cum_XS_5Y <- ggplot(data=Cum_60M_XS_melt,aes(x=Date,y=value,group=variable,color=variable))+
              geom_line(size=1)+scale_colour_brewer(palette="Set2")+
              theme(strip.background = element_rect(fill="#085A93"))+
              theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
              scale_x_date(date_labels="%m-%Y",date_breaks="6 months")+
              ggtitle("5Y Cumulative XS Return vs MSCI Europe (%)")+
              theme(plot.title = element_text(size = 13, face = "bold"))+
              theme(text=element_text(family="Times"))
            
            Cum_120M_XS <- Roll_Ret_1M[(nrow(Roll_Ret_1M)-120):nrow(Roll_Ret_1M),]
            Cum_120M_XS[1,] <- 0
            Cum_120M_XS <- cumprod(1+Cum_120M_XS)
            Cum_120M_XS <- sweep(Cum_120M_XS[,2:7],1,Cum_120M_XS[,1],"-")
            Cum_120M_XS <- as.data.frame(Cum_120M_XS)
            Cum_120M_XS$Date <- as.Date(rownames(Cum_120M_XS))
            Cum_120M_XS_melt <- melt(Cum_120M_XS,id.vars="Date")
            
            Cum_XS_10Y <- ggplot(data=Cum_120M_XS_melt,aes(x=Date,y=value,group=variable,color=variable))+
              geom_line(size=1)+scale_colour_brewer(palette="Set2")+
              theme(strip.background = element_rect(fill="#085A93"))+
              theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
              scale_x_date(date_labels="%Y",date_breaks="1 year")+
              ggtitle("10Y Cumulative XS Return vs MSCI Europe (%)")+
              theme(plot.title = element_text(size = 13, face = "bold"))+
              theme(text=element_text(family="Times"))

            
            Roll_Ret_3M <- ROC(MSCI_Index,n=3,type="discrete")
            Roll_Ret_XS_3M <-sweep(Roll_Ret_3M[,2:7],1,Roll_Ret_3M[,1],"-")
          
              Roll_Ret_6M <- ROC(MSCI_Index,n=6,type="discrete")
              Roll_Ret_XS_6M <-sweep(Roll_Ret_6M[,2:7],1,Roll_Ret_6M[,1],"-")
              
                Roll_Ret_12M <- ROC(MSCI_Index,n=12,type="discrete")
                Roll_Ret_XS_12M <-sweep(Roll_Ret_12M[,2:7],1,Roll_Ret_12M[,1],"-")
      
         
          agg_Roll_XS <- as.data.frame(rbind(Roll_Ret_XS_1M[nrow(Roll_Ret_XS_1M),],Roll_Ret_XS_3M[nrow(Roll_Ret_XS_3M),],Roll_Ret_XS_6M[nrow(Roll_Ret_XS_6M),],Roll_Ret_XS_12M[nrow(Roll_Ret_XS_12M),]))
          agg_Roll_XS$Length<-c("1M","3M","6M","12M")
          agg_Roll_XS$Length <- factor(agg_Roll_XS$Length, levels = c("1M","3M","6M","12M"))
          
            agg_Roll_XS_melt <- melt(agg_Roll_XS,id.vars="Length")
            agg_Roll_XS_melt$value <- round(agg_Roll_XS_melt$value*100,2)
      
                #agg_Roll_XS_melt$value <- factor(agg_Roll_XS_melt$value,levels=agg_Roll_XS_melt[order(agg_Roll_XS_melt$value),])
                #agg_Roll_XS_melt$value <- factor(agg_Roll_XS_melt$value,levels=agg_Roll_XS_melt[order(agg_Roll_XS_melt$Length,agg_Roll_XS_melt$value),])
                #levels(agg_Roll_XS_melt$value) <- agg_Roll_XS_melt$value[order(agg_Roll_XS_melt$Length,agg_Roll_XS_melt$value,decreasing = TRUE)]
      
          gbar_XSRet <- ggplot(agg_Roll_XS_melt,aes(x=variable,y = value,fill=variable)) + geom_bar(stat="identity")+  
                          geom_text(aes(label=value),vjust=-0.30,size=3) +scale_fill_brewer(direction = -1)+
                          facet_wrap(~Length,ncol=2,nrow=2,scales = "free")+
                          theme(strip.background = element_rect(fill="#085A93"))+
                          theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
                          ggtitle(paste("Relative Performance vs MSCI Europe as of: ",last(index(MSCI_Index))))+ylab("")+
                          theme(plot.title = element_text(size = 13, face = "bold"))+
                          theme(text=element_text(family="Times"))
       
      ### (2)    
        ### 3M Rolling XSRet    
          ###Stdev of XSRet 3M
            Stdev_3M <- data.frame(Stdev=apply(Roll_Ret_XS_3M[1:6],2,sd,na.rm=TRUE),variable=colnames(Roll_Ret_XS_3M[1:6]))
            Stdev_3M$SD2 <- Stdev_3M$Stdev*2*100
            
            Roll_Ret_XS_3M<-as.data.frame(Roll_Ret_XS_3M)
            Roll_Ret_XS_3M$Date <- as.Date(rownames(Roll_Ret_XS_3M))
            Roll_Ret_XS_3M<- na.omit(Roll_Ret_XS_3M)
            Roll_Ret_XS_3M[,1:6]<-Roll_Ret_XS_3M[,1:6]*100
            
              melt_3MXS <- melt(Roll_Ret_XS_3M,measure.vars=c("Value","Quality","MinVol","Small","Momentum","Growth"),id.vars="Date")
            
                gline_3MRoll <- ggplot(data=melt_3MXS,aes(x=Date,y=value))+
                                  geom_line(aes(colour=variable))+
                                  facet_wrap(~variable,ncol=3,nrow=2)+ #,scales="free"
                                  geom_hline(data=Stdev_3M,aes(yintercept=SD2),linetype="twodash")+
                                  geom_hline(data=Stdev_3M,aes(yintercept=-SD2),linetype="twodash")+
                                  theme(strip.background = element_rect(fill="#085A93"))+
                                  theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
                                  scale_x_date(date_labels="%y",date_breaks="2 years")+
                                  ggtitle("3M EQ Style XS Return vs MSCI Europe - Horizontal Line: +- 2SD")+
                                  theme(plot.title = element_text(size = 13, face = "bold"))+
                                  theme(text=element_text(family="Times"))
        
                #theme(legend.position="none")+ylab("Rank Correlation with Valuation ZSCORE")
            
        ### 6M Rolling XSRet    
          ###Stdev of XSRet 6M    
            
            Roll_Ret_XS_6M<- na.omit(Roll_Ret_XS_6M)
        
            Stdev_6M <- data.frame(Stdev=apply(Roll_Ret_XS_6M[1:6],2,sd,na.rm=TRUE),variable=colnames(Roll_Ret_XS_6M[1:6]))
            Stdev_6M$SD2 <- Stdev_6M$Stdev*2*100
              
              Roll_Ret_XS_6M<-as.data.frame(Roll_Ret_XS_6M)
              Roll_Ret_XS_6M$Date <- as.Date(rownames(Roll_Ret_XS_6M))
              
              Roll_Ret_XS_6M[,1:6]<-Roll_Ret_XS_6M[,1:6]*100
              
              melt_6MXS <- melt(Roll_Ret_XS_6M,measure.vars=c("Value","Quality","MinVol","Small","Momentum","Growth"),id.vars="Date")
              
                gline_6MRoll <- ggplot(data=melt_6MXS,aes(x=Date,y=value))+
                                  geom_line(aes(colour=variable))+
                                  facet_wrap(~variable,ncol=3,nrow=2)+
                                  geom_hline(data=Stdev_6M,aes(yintercept=SD2),linetype="twodash")+
                                  geom_hline(data=Stdev_6M,aes(yintercept=-SD2),linetype="twodash")+
                                  theme(strip.background = element_rect(fill="#085A93"))+
                                  theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
                                  scale_x_date(date_labels="%y",date_breaks="2 years")+
                                  ggtitle("6M EQ Style XS Return vs MSCI Europe - Horizontal Line: +- 2SD")+
                                  theme(plot.title = element_text(size = 13, face = "bold"))+
                                  theme(text=element_text(family="Times"))
        
            ###tS output in xls file
                f_Name <- paste0("EQ_StyleValuation_",ED,".xlsx")
                folder <- "S:/BRUSSELS/MANUFACTURING/COREINVENG/Personal/Julien/15 - Style Valuation/timeSeries/"
                f_Full <- paste0(folder,f_Name)
                  
                  write.xlsx(x=Cum_12M_XS,file=f_Full,sheetName = "Style_CumXS_1Y",row.names = TRUE)
                  write.xlsx(x=Cum_36M_XS,file=f_Full,sheetName = "Style_CumXS_3Y",row.names = TRUE,append = TRUE)  
                  write.xlsx(x=Cum_60M_XS,file=f_Full,sheetName = "Style_CumXS_5Y",row.names = TRUE,append = TRUE)  
                  write.xlsx(x=Cum_120M_XS,file=f_Full,sheetName = "Style_CumXS_10Y",row.names = TRUE,append = TRUE)  
                  write.xlsx(x=agg_Roll_XS,file=f_Full,sheetName = "Style_AggXS",row.names = TRUE,append = TRUE)
                  
                  write.xlsx(x=Roll_Ret_XS_3M,file=f_Full,sheetName = "Style_Roll_XSRet_3M",row.names = TRUE,append = TRUE)
                    write.xlsx(x=Stdev_3M,file=f_Full,sheetName = "Style_Roll_Stdev_3M",row.names = TRUE,append = TRUE)
                  write.xlsx(x=Roll_Ret_XS_6M,file=f_Full,sheetName = "Style_Roll_XSRet_6M",row.names = TRUE,append = TRUE)
                    write.xlsx(x=Stdev_6M,file=f_Full,sheetName = "Style_Roll_Stdev_6M",row.names = TRUE,append = TRUE)
                    
            gplot_XS <- list(gbar_XS=gbar_XSRet,gline_3M=gline_3MRoll,gline_6M=gline_6MRoll,Cum1Y=Cum_XS_1Y,Cum3Y=Cum_XS_3Y,Cum5Y=Cum_XS_5Y,Cum10Y=Cum_XS_10Y)  
          return(gplot_XS)
          }
      
        startDate = as.Date("2000-12-29")
          p_XS <- calc_BBG_PerfStyle(SD=startDate,ED=endDate)
    
          
      calc_BBG_PerfSectors <- function(SD,ED){
        
        library(Rblpapi)
        library(ggplot2)
        library(reshape2)
        library(xts)
        library(TTR)
        
        blpConnect()
        opt <- c("periodicitySelection"="MONTHLY","currency"="EUR")

        MSCI_Index <- bdh("M7EU Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)
        MSCI_Index[,3] <- bdh("M7EU0FN Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #financials
        MSCI_Index[,4] <- bdh("M7EU0HC Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #health care
        MSCI_Index[,5] <- bdh("M7EU0IN Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #industrials
        MSCI_Index[,6] <- bdh("M7EU0EN Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #energy
        MSCI_Index[,7] <- bdh("M7EU0CD Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #Consumer Discretionary
        MSCI_Index[,8] <- bdh("M7EU0IT Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #IT
        MSCI_Index[,9] <- bdh("M7EU0TC Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #Telecom
        MSCI_Index[,10] <- bdh("M7EU0UT Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #Utilities
        MSCI_Index[,11] <- bdh("M7EU0CS Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #Consumer Staples
        MSCI_Index[,12] <- bdh("M7EU0MT Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #Materials
        MSCI_Index[,13] <- bdh("M7EU0RE Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] #Real Estate

        colnames(MSCI_Index)<-c("date","Market","Financials","Healthcare","Industrials","Energy","ConsumDiscr","IT","Telecom",
                                "Utilities","ConsumStap","Materials","Real Estate")
        
        MSCI_Index <- xts(MSCI_Index[,2:13],order.by = MSCI_Index$date,frequency = "monthly")
        
        
        Roll_Ret_1M <- ROC(MSCI_Index,n=1,type="discrete")
        Roll_Ret_XS_1M <-sweep(Roll_Ret_1M[,2:12],1,Roll_Ret_1M[,1],"-")
        
        Roll_Ret_3M <- ROC(MSCI_Index,n=3,type="discrete")
        Roll_Ret_XS_3M <-sweep(Roll_Ret_3M[,2:12],1,Roll_Ret_3M[,1],"-")
        
        Roll_Ret_6M <- ROC(MSCI_Index,n=6,type="discrete")
        Roll_Ret_XS_6M <-sweep(Roll_Ret_6M[,2:12],1,Roll_Ret_6M[,1],"-")
        
        Roll_Ret_12M <- ROC(MSCI_Index,n=12,type="discrete")
        Roll_Ret_XS_12M <-sweep(Roll_Ret_12M[,2:12],1,Roll_Ret_12M[,1],"-")
        
        
        agg_Roll_XS <- as.data.frame(rbind(Roll_Ret_XS_1M[nrow(Roll_Ret_XS_1M),],Roll_Ret_XS_3M[nrow(Roll_Ret_XS_3M),],Roll_Ret_XS_6M[nrow(Roll_Ret_XS_6M),],Roll_Ret_XS_12M[nrow(Roll_Ret_XS_12M),]))
        agg_Roll_XS$Length<-c("1M","3M","6M","12M")
        agg_Roll_XS$Length <- factor(agg_Roll_XS$Length, levels = c("1M","3M","6M","12M"))
        
        agg_Roll_XS_melt <- melt(agg_Roll_XS,id.vars="Length")
        agg_Roll_XS_melt$value <- round(agg_Roll_XS_melt$value*100,2)
        
        #agg_Roll_XS_melt$value <- factor(agg_Roll_XS_melt$value,levels=agg_Roll_XS_melt[order(agg_Roll_XS_melt$value),])
        #agg_Roll_XS_melt$value <- factor(agg_Roll_XS_melt$value,levels=agg_Roll_XS_melt[order(agg_Roll_XS_melt$Length,agg_Roll_XS_melt$value),])
        #levels(agg_Roll_XS_melt$value) <- agg_Roll_XS_melt$value[order(agg_Roll_XS_melt$Length,agg_Roll_XS_melt$value,decreasing = TRUE)]

        gbar_XSRet <- ggplot(agg_Roll_XS_melt,aes(x=variable,y = value)) + geom_bar(stat="identity",color="black",fill="#A6CEE3")+
          geom_text(aes(label=value),vjust=-0.30,size=3)+
          facet_wrap(~Length,ncol=2,nrow=2,scales = "free")+
          theme(strip.background = element_rect(fill="#085A93"))+
          theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
          ggtitle(paste("Relative Performance vs MSCI Europe as of: ",last(index(MSCI_Index))))+ylab("")+
          theme(plot.title = element_text(size = 13, face = "bold"))+
          theme(text=element_text(family="Times"))
        
        
        ### (2)    
        ### 3M Rolling XSRet    
        ###Stdev of XSRet 3M
        Stdev_3M <- data.frame(Stdev=apply(Roll_Ret_XS_3M[1:11],2,sd,na.rm=TRUE),variable=colnames(Roll_Ret_XS_3M[1:11]))
        Stdev_3M$SD2 <- Stdev_3M$Stdev*2*100
        
        Roll_Ret_XS_3M<-as.data.frame(Roll_Ret_XS_3M)
        Roll_Ret_XS_3M$Date <- as.Date(rownames(Roll_Ret_XS_3M))
        Roll_Ret_XS_3M<- na.omit(Roll_Ret_XS_3M)
        Roll_Ret_XS_3M[,1:11]<-Roll_Ret_XS_3M[,1:11]*100
        
        melt_3MXS <- melt(Roll_Ret_XS_3M,measure.vars=c("Financials","Healthcare","Industrials","Energy","ConsumDiscr","IT","Telecom",
                                                        "Utilities","ConsumStap","Materials","Real Estate"),id.vars="Date")
        
        gline_3MRoll <- ggplot(data=melt_3MXS,aes(x=Date,y=value))+
          geom_line(aes(colour=variable))+
          facet_wrap(~variable,ncol=4,nrow=3)+ #,scales="free"
          geom_hline(data=Stdev_3M,aes(yintercept=SD2),linetype="twodash")+
          geom_hline(data=Stdev_3M,aes(yintercept=-SD2),linetype="twodash")+
          theme(strip.background = element_rect(fill="#085A93"))+
          theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
          scale_x_date(date_labels="%m-%y",date_breaks="2 years")+
          ggtitle("3M EU EQ Sector XS Return vs MSCI Europe - Horizontal Line: +- 2SD")+
          theme(plot.title = element_text(size = 13, face = "bold"))+
          theme(text=element_text(family="Times"))
        
        #theme(legend.position="none")+ylab("Rank Correlation with Valuation ZSCORE")
        
        ### 6M Rolling XSRet    
        ###Stdev of XSRet 6M    
        
        Roll_Ret_XS_6M<- na.omit(Roll_Ret_XS_6M)
        
        Stdev_6M <- data.frame(Stdev=apply(Roll_Ret_XS_6M[1:11],2,sd,na.rm=TRUE),variable=colnames(Roll_Ret_XS_6M[1:11]))
        Stdev_6M$SD2 <- Stdev_6M$Stdev*2*100
        
        Roll_Ret_XS_6M<-as.data.frame(Roll_Ret_XS_6M)
        Roll_Ret_XS_6M$Date <- as.Date(rownames(Roll_Ret_XS_6M))
        
        Roll_Ret_XS_6M[,1:11]<-Roll_Ret_XS_6M[,1:11]*100
        
        melt_6MXS <- melt(Roll_Ret_XS_6M,measure.vars=c("Financials","Healthcare","Industrials","Energy","ConsumDiscr","IT","Telecom",
                                                        "Utilities","ConsumStap","Materials","Real Estate"),id.vars="Date")
        
        gline_6MRoll <- ggplot(data=melt_6MXS,aes(x=Date,y=value))+
          geom_line(aes(colour=variable))+
          facet_wrap(~variable,ncol=4,nrow=3)+
          geom_hline(data=Stdev_6M,aes(yintercept=SD2),linetype="twodash")+
          geom_hline(data=Stdev_6M,aes(yintercept=-SD2),linetype="twodash")+
          theme(strip.background = element_rect(fill="#085A93"))+
          theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
          scale_x_date(date_labels="%m-%y",date_breaks="2 years")+
          ggtitle("6M EU EQ Sector XS Return vs MSCI Europe - Horizontal Line: +- 2SD")+
          theme(plot.title = element_text(size = 13, face = "bold"))+
          theme(text=element_text(family="Times"))
        
        
        gplot_XS <- list(gbar_XS=gbar_XSRet,gline_3M=gline_3MRoll,gline_6M=gline_6MRoll)  
        return(gplot_XS)
      }
      
        startDate = as.Date("2010-05-31")
          p_XS_Sectors <- calc_BBG_PerfSectors(SD=startDate,ED=endDate)   
      
      calc_BBG_PerfCountry <- function(SD,ED){
            
            library(Rblpapi)
            library(ggplot2)
            library(reshape2)
            library(xts)
            library(TTR)
            
            blpConnect()
            opt <- c("periodicitySelection"="MONTHLY","currency"="EUR")
            
            MSCI_Index <- bdh("M7EU Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)
            MSCI_Index[,3] <- bdh("M7GB Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] 
            MSCI_Index[,4] <- bdh("M7FR Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2]
            MSCI_Index[,5] <- bdh("M7CH Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] 
            MSCI_Index[,6] <- bdh("M7DE Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] 
            MSCI_Index[,7] <- bdh("M7NL Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] 
            MSCI_Index[,8] <- bdh("M7ES Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] 
            MSCI_Index[,9] <- bdh("M7SE Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] 
            MSCI_Index[,10] <- bdh("M7AT Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2]
            MSCI_Index[,11] <- bdh("M7IT Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] 
            MSCI_Index[,12] <- bdh("M7DK Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] 
            MSCI_Index[,13] <- bdh("M7BE Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2]
            MSCI_Index[,14] <- bdh("M7FI Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2]
            MSCI_Index[,15] <- bdh("M7NO Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2]
            MSCI_Index[,16] <- bdh("M7IE Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2] 
            MSCI_Index[,17] <- bdh("M7PT Index",c("TOT_RETURN_INDEX_NET_DVDS"),options = opt,start.date = SD,end.date = ED)[2]
            
            colnames(MSCI_Index)<-c("date","Europe","GB","FR","CH","DE","NL","ES","SE","AT","IT","DK","BE","FI","NO","IE","PT")
            
            MSCI_Index <- xts(MSCI_Index[,2:17],order.by = MSCI_Index$date,frequency = "monthly")
            
            
            Roll_Ret_1M <- ROC(MSCI_Index,n=1,type="discrete")
            Roll_Ret_XS_1M <-sweep(Roll_Ret_1M[,2:16],1,Roll_Ret_1M[,1],"-")
            
            Roll_Ret_3M <- ROC(MSCI_Index,n=3,type="discrete")
            Roll_Ret_XS_3M <-sweep(Roll_Ret_3M[,2:16],1,Roll_Ret_3M[,1],"-")
            
            Roll_Ret_6M <- ROC(MSCI_Index,n=6,type="discrete")
            Roll_Ret_XS_6M <-sweep(Roll_Ret_6M[,2:16],1,Roll_Ret_6M[,1],"-")
            
            Roll_Ret_12M <- ROC(MSCI_Index,n=12,type="discrete")
            Roll_Ret_XS_12M <-sweep(Roll_Ret_12M[,2:16],1,Roll_Ret_12M[,1],"-")
            
            
            agg_Roll_XS <- as.data.frame(rbind(Roll_Ret_XS_1M[nrow(Roll_Ret_XS_1M),],Roll_Ret_XS_3M[nrow(Roll_Ret_XS_3M),],Roll_Ret_XS_6M[nrow(Roll_Ret_XS_6M),],Roll_Ret_XS_12M[nrow(Roll_Ret_XS_12M),]))
            agg_Roll_XS$Length<-c("1M","3M","6M","12M")
            agg_Roll_XS$Length <- factor(agg_Roll_XS$Length, levels = c("1M","3M","6M","12M"))
            
            agg_Roll_XS_melt <- melt(agg_Roll_XS,id.vars="Length")
            agg_Roll_XS_melt$value <- round(agg_Roll_XS_melt$value*100,2)
            
            #agg_Roll_XS_melt$value <- factor(agg_Roll_XS_melt$value,levels=agg_Roll_XS_melt[order(agg_Roll_XS_melt$value),])
            #agg_Roll_XS_melt$value <- factor(agg_Roll_XS_melt$value,levels=agg_Roll_XS_melt[order(agg_Roll_XS_melt$Length,agg_Roll_XS_melt$value),])
            #levels(agg_Roll_XS_melt$value) <- agg_Roll_XS_melt$value[order(agg_Roll_XS_melt$Length,agg_Roll_XS_melt$value,decreasing = TRUE)]

            gbar_XSRet <- ggplot(agg_Roll_XS_melt,aes(x=variable,y = value)) + geom_bar(stat="identity",color="black",fill="#A6CEE3")+  
              geom_text(aes(label=value),vjust=-0.30,size=3)+
              facet_wrap(~Length,ncol=2,nrow=2,scales = "free")+
              theme(strip.background = element_rect(fill="#085A93"))+
              theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
              ggtitle(paste("Relative Performance (EUR) vs MSCI Europe as of: ",last(index(MSCI_Index))))+ylab("")+
              theme(plot.title = element_text(size = 13, face = "bold"))+
              theme(text=element_text(family="Times"))
            
            ### (2)    
            ### 3M Rolling XSRet    
            ###Stdev of XSRet 3M
            Stdev_3M <- data.frame(Stdev=apply(Roll_Ret_XS_3M[1:15],2,sd,na.rm=TRUE),variable=colnames(Roll_Ret_XS_3M[1:15]))
            Stdev_3M$SD2 <- Stdev_3M$Stdev*2*100
            
            Roll_Ret_XS_3M<-as.data.frame(Roll_Ret_XS_3M)
            Roll_Ret_XS_3M$Date <- as.Date(rownames(Roll_Ret_XS_3M))
            Roll_Ret_XS_3M<- na.omit(Roll_Ret_XS_3M)
            Roll_Ret_XS_3M[,1:15]<-Roll_Ret_XS_3M[,1:15]*100
            
            melt_3MXS <- melt(Roll_Ret_XS_3M,measure.vars=c("GB","FR","CH","DE","NL","ES","SE","AT","IT","DK","BE","FI","NO","IE","PT"),id.vars="Date")
            
            gline_3MRoll <- ggplot(data=melt_3MXS,aes(x=Date,y=value))+
              geom_line(aes(colour=variable))+
              facet_wrap(~variable,ncol=4,nrow=4)+ #,scales="free"
              geom_hline(data=Stdev_3M,aes(yintercept=SD2),linetype="twodash")+
              geom_hline(data=Stdev_3M,aes(yintercept=-SD2),linetype="twodash")+
              theme(strip.background = element_rect(fill="#085A93"))+
              theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
              scale_x_date(date_labels="%m-%y",date_breaks="2 years")+
              ggtitle("3M EU EQ Country XS Return (EUR) vs MSCI Europe - Horizontal Line: +- 2SD")+
              theme(plot.title = element_text(size = 13, face = "bold"))+
              theme(text=element_text(family="Times"))
            
            #theme(legend.position="none")+ylab("Rank Correlation with Valuation ZSCORE")
            
            ### 6M Rolling XSRet    
            ###Stdev of XSRet 6M    
            
            Roll_Ret_XS_6M<- na.omit(Roll_Ret_XS_6M)
            
            Stdev_6M <- data.frame(Stdev=apply(Roll_Ret_XS_6M[1:15],2,sd,na.rm=TRUE),variable=colnames(Roll_Ret_XS_6M[1:15]))
            Stdev_6M$SD2 <- Stdev_6M$Stdev*2*100
            
            Roll_Ret_XS_6M<-as.data.frame(Roll_Ret_XS_6M)
            Roll_Ret_XS_6M$Date <- as.Date(rownames(Roll_Ret_XS_6M))
            
            Roll_Ret_XS_6M[,1:15]<-Roll_Ret_XS_6M[,1:15]*100
            
            melt_6MXS <- melt(Roll_Ret_XS_6M,measure.vars=c("GB","FR","CH","DE","NL","ES","SE","AT","IT","DK","BE","FI","NO","IE","PT"),id.vars="Date")
            
            gline_6MRoll <- ggplot(data=melt_6MXS,aes(x=Date,y=value))+
              geom_line(aes(colour=variable))+
              facet_wrap(~variable,ncol=4,nrow=4)+
              geom_hline(data=Stdev_6M,aes(yintercept=SD2),linetype="twodash")+
              geom_hline(data=Stdev_6M,aes(yintercept=-SD2),linetype="twodash")+
              theme(strip.background = element_rect(fill="#085A93"))+
              theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
              scale_x_date(date_labels="%m-%y",date_breaks="2 years")+
              ggtitle("6M EU EQ Country XS Return (EUR) vs MSCI Europe - Horizontal Line: +- 2SD")+
              theme(plot.title = element_text(size = 13, face = "bold"))+
              theme(text=element_text(family="Times"))
            
            
            gplot_XS <- list(gbar_XS=gbar_XSRet,gline_3M=gline_3MRoll,gline_6M=gline_6MRoll)  
            return(gplot_XS)
          }
          
          startDate = as.Date("2010-05-31")
          p_XS_Country <- calc_BBG_PerfCountry(SD=startDate,ED=endDate)    
          
             
    ###   
    ### (2) ETF INFLOW
    ###
      calc_ETF_Inflow <- function(value_Sec,dvd_Sec,vol_Sec,small_Sec,growth_Sec,mom_Sec,quality_Sec,SD,ED){      
      
      library(dplyr)
      library(Rblpapi)
      library(ggplot2)
      library(reshape2)
      
        blpConnect()
        opt <- c("periodicitySelection"="WEEKLY","currency"="EUR")

            value_ETF <- bdh(value_Sec,c("CUR_MKT_CAP","FUND_FLOW"),options = opt,start.date = SD,end.date = ED)
            
              value_1 <- as.data.frame(value_ETF[[1]])
              value_2 <- as.data.frame(value_ETF[[2]])
                value <- full_join(value_1,value_2,by=c("date"))
              value_3 <- as.data.frame(value_ETF[[3]])
                value <- full_join(value,value_3,by=c("date"))
                value[is.na(value)]<- 0
                
                  value$MKT_CAP <- value[,2]+value[,4]+value[,6]
                  value$FLOW    <- value[,3]+value[,5]+value[,7]
                  value$FLOW_Sum <- cumsum(value$FLOW)
                  value$Style <- "Value"
    
            
         
            dvd_ETF <- bdh(dvd_Sec,c("CUR_MKT_CAP","FUND_FLOW"),options = opt,start.date = SD,end.date = ED)
            
              dvd_1 <- as.data.frame(dvd_ETF[[1]])
              dvd_2 <- as.data.frame(dvd_ETF[[2]])
                dvd <- full_join(dvd_1,dvd_2,by=c("date"))
              dvd_3 <- as.data.frame(dvd_ETF[[3]])
                dvd <- full_join(dvd,dvd_3,by=c("date"))
                dvd[is.na(dvd)]<- 0
              
                  dvd$MKT_CAP <- dvd[,2]+dvd[,4]+dvd[,6]
                  dvd$FLOW    <- dvd[,3]+dvd[,5]+dvd[,7]
                  dvd$FLOW_Sum <- cumsum(dvd$FLOW)
                  dvd$Style <- "Dividend"
            
            
         
            vol_ETF <- bdh(vol_Sec,c("CUR_MKT_CAP","FUND_FLOW"),options = opt,start.date = SD,end.date = ED)
    
              vol_1 <- as.data.frame(vol_ETF[[1]])
              vol_2 <- as.data.frame(vol_ETF[[2]])
                vol <- full_join(vol_1,vol_2,by=c("date"))
              vol_3 <- as.data.frame(vol_ETF[[3]])
                vol <- full_join(vol,vol_3,by=c("date"))
                vol[is.na(vol)]<- 0
              
                  vol$MKT_CAP <- vol[,2]+vol[,4]+vol[,6]
                  vol$FLOW    <- vol[,3]+vol[,5]+vol[,7]
                  vol$FLOW_Sum <- cumsum(vol$FLOW)
                  vol$Style <- "LowVolatility"
            
          
            small_ETF <- bdh(small_Sec,c("CUR_MKT_CAP","FUND_FLOW"),options = opt,start.date = SD,end.date = ED)
            
              small_1 <- as.data.frame(small_ETF[[1]])
              small_2 <- as.data.frame(small_ETF[[2]])
                small <- full_join(small_1,small_2,by=c("date"))
                small[is.na(small)]<- 0
              
                  small$MKT_CAP <- small[,2]+small[,4]
                  small$FLOW    <- small[,3]+small[,5]
                  small$FLOW_Sum <- cumsum(small$FLOW)
                  small$Style <- "Size"
    
         
            growth_ETF <- bdh(growth_Sec,c("CUR_MKT_CAP","FUND_FLOW"),options = opt,start.date = SD,end.date = ED)
          
              growth_1 <- as.data.frame(growth_ETF[[1]])
              growth_2 <- as.data.frame(growth_ETF[[2]])
                growth <- full_join(growth_1,growth_2,by=c("date"))
              growth_3 <- as.data.frame(growth_ETF[[3]])
                growth <- full_join(growth,growth_3,by=c("date"))
                growth[is.na(growth)]<- 0
                
                  growth$MKT_CAP <- growth[,2]+growth[,4]
                  growth$FLOW    <- growth[,3]+growth[,5]
                  growth$FLOW_Sum <- cumsum(growth$FLOW)
                  growth$Style <- "Growth"
                  
           
         
            mom_ETF <- bdh(mom_Sec,c("CUR_MKT_CAP","FUND_FLOW"),options = opt,start.date = SD,end.date = ED)
          
              mom_1 <- as.data.frame(mom_ETF[[1]])
              mom_2 <- as.data.frame(mom_ETF[[2]])
                mom <- full_join(mom_1,mom_2,by=c("date"))
              mom_3 <- as.data.frame(mom_ETF[[3]])
                mom <- full_join(mom,mom_3,by=c("date"))
                mom[is.na(mom)]<- 0
              
                  mom$MKT_CAP <- mom[,2]+mom[,4]
                  mom$FLOW    <- mom[,3]+mom[,5]
                  mom$FLOW_Sum <- cumsum(mom$FLOW)
                  mom$Style <- "Momentum"    
                  
        
            quality_ETF <- bdh(quality_Sec,c("CUR_MKT_CAP","FUND_FLOW"),options = opt,start.date = SD,end.date = ED)
                  
              quality_1 <- as.data.frame(quality_ETF[[1]])
              quality_2 <- as.data.frame(quality_ETF[[2]])
                quality <- full_join(quality_1,quality_2,by=c("date"))
              quality_3 <- as.data.frame(quality_ETF[[3]])
                quality <- full_join(quality,quality_3,by=c("date"))
                quality[is.na(quality)]<- 0
                  
                  quality$MKT_CAP <- quality[,2]+quality[,4]
                  quality$FLOW    <- quality[,3]+quality[,5]
                  quality$FLOW_Sum <- cumsum(quality$FLOW)
                  quality$Style <- "Quality"           
    
          #### just net inflow
        ETF_Inflow <- as.data.frame(rbind(value[,c("date","FLOW_Sum","Style")],dvd[,c("date","FLOW_Sum","Style")],
                                          vol[,c("date","FLOW_Sum","Style")],small[,c("date","FLOW_Sum","Style")],
                                          growth[,c("date","FLOW_Sum","Style")],mom[,c("date","FLOW_Sum","Style")],
                                          quality[,c("date","FLOW_Sum","Style")]))
        
        
        ETF_Inflow_Table <- acast(ETF_Inflow, date ~ Style,value.var = "FLOW_Sum")
        ETF_Inflow_melt <- melt(ETF_Inflow,id.vars=c("date","Style"))
        
        
        p_ETF_Inflow <- ggplot(ETF_Inflow_melt,aes(x=date,y =value,fill=variable)) +geom_area()+ scale_fill_brewer(palette="Dark2")+
                          facet_wrap(~Style,ncol=2,nrow=4,scales = "free")+
                          theme(strip.background = element_rect(fill="#085A93"))+
                          theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
                          ggtitle("3Y ETF Cumulative Net Inflow (M EUR)")+ylab("")+
                          scale_x_date(date_breaks ="3 months",date_labels="%m-%y")+
                          theme(plot.title = element_text(size = 13, face = "bold"))+
                          theme(text=element_text(family="Times"))
    
         #Export tS in xls
            f_Name <- paste0("EQ_StyleValuation_",ED,".xlsx")
            folder <- "S:/BRUSSELS/MANUFACTURING/COREINVENG/Personal/Julien/15 - Style Valuation/timeSeries/"
            f_Full <- paste0(folder,f_Name)
              
              write.xlsx(x=ETF_Inflow_Table,file=f_Full,sheetName = "Style_ETF_NetInflow",row.names = TRUE,append = TRUE)
        
       return(p_ETF_Inflow)  
    }    
    
      #Set ticker list of EQ Style ETF
    
        value <- c("CV9 FP Equity","IEVL LN Equity","EMSV GY Equity")
        dvd <- c("SPYW GY Equity","SD3PEX IM Equity","SEL FP Equity")
        vol <- c("MVEU LN Equity","EUMV FP Equity","MIVO FP Equity")
        small <- c("SCXPEX GR Equity","XXSC GR Equity")
        growth <- c("IDJG NA Equity","CG9 FP Equity","GWT FP Equity")
        mom <- c("IWMO LN Equity","IEMO LN Equity","MCEU FP Equity")
        quality <- c("SGQE FP Equity","IWQU LN Equity","QCEU FP Equity")
        
      #Get ggplot inflow
        startDate = as.Date("2013-12-31")
        
        gg_ETF_Inflow <- calc_ETF_Inflow(value_Sec = value, dvd_Sec = dvd, 
                                         vol_Sec = vol,small_Sec = small, 
                                         growth_Sec = growth, mom_Sec = mom, 
                                         quality_Sec = quality,
                                         SD=startDate, ED=endDate)
     
    ###
    ### (3) IQR
    ### 
        library(plyr)
        data_IQR <- data[,c("Date","ROA","PER","avgVOL","pMOM","Mkcap","gEPS")]
        colnames(data_IQR) <- c("Date","Quality","Value","Volatility","Momentum","Size","Growth")
        
          ###Find first row of growth data available
          first_Date <- data_IQR[min(which(!is.na(data$Mkcap))),"Date"]
          data_IQR <- data_IQR[data_IQR$Date >= first_Date,]
          
          fctr_list <- colnames(data_IQR)[2:length(colnames(data_IQR))]
          Final_IQR <- data.frame(Date=unique(data_IQR$Date))
        
          for (fctr_name in fctr_list){
            tmp_data <- data_IQR[,c("Date",fctr_name)]
            colnames(tmp_data)<-c("Date","fctr_value")
            
            #tmp_var <- paste0("IQR_",fctr_name)
            #fctr_IQR <- ddply(tmp_data,.(Date),summarise,rng=IQR(fctr_value,na.rm = TRUE))
            fctr_IQR<-ddply(tmp_data,.(Date),summarise, 
                            #X0 = quantile(Quality, probs = 0,na.rm=TRUE), 
                            Q1= quantile(fctr_value, probs = 0.20,na.rm=TRUE), 
                            #X40 = quantile(Quality, probs = 0.40,na.rm=TRUE), 
                            #X60 = quantile(Quality, probs = 0.60,na.rm=TRUE),
                            Q5 = quantile(fctr_value, probs = 0.80,na.rm=TRUE)) 
            #X100 = quantile(Quality, probs = 1,na.rm=TRUE))
            
            #fctr_IQR$IQR <- fctr_IQR$Q5 - fctr_IQR$Q1
            fctr_IQR$factor <- fctr_name
            IQR_melt <- melt(fctr_IQR,id.vars=c("Date","factor"))
            
            if(fctr_name == fctr_list[1]){
              Final_IQR <- IQR_melt
            }else{
              Final_IQR <- rbind(Final_IQR,IQR_melt)
            }
            
          }
          
      p_IQR <- ggplot(Final_IQR,aes(x=Date,y=value,colour=variable)) +geom_line()+  
        facet_wrap(~factor,ncol=2,nrow=3,scales = "free")+
        scale_x_date(date_breaks ="2 years",date_labels="%Y")+
        theme(strip.background = element_rect(fill="#085A93"))+
        theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
        ggtitle("Evolution of Q1Q5 Factor Metrics")+
        theme(plot.title = element_text(size = 13, face = "bold"))+
        theme(text=element_text(family="Times"))
    
      
      
    ###
    ### (4) Boxplot Valuation
    ### (5) Historical Valuation
    ### (6) Kendall Rank Correlation
    ### 
      historical_Valuation <- function(data_Valuation,ED){
        
        first_Date <- data_Valuation[min(which(!is.na(data_Valuation$Mkcap))),"Date"]
        data_Valuation <- data_Valuation[data_Valuation$Date >= first_Date,]
        last_Date <- data_Valuation[max(which(!is.na(data_Valuation$Mkcap))),"Date"]
        
      #Define each Style Portfolio and Calculate its Valuation
        #Quality
          Quality <- data_Valuation[!is.na(data_Valuation$Quality_F) & data_Valuation$Quality_F=="1",]
          Quality_Valuation <- ddply(Quality,.(Date),function(x){mean(-x$Valuation_ZSCORE,na.rm=TRUE)})
        #Value
          Value <- data_Valuation[!is.na(data_Valuation$Value_F) &data_Valuation$Value_F=="1",]
          Value_Valuation <- ddply(Value,.(Date),function(x){mean(-x$Valuation_ZSCORE,na.rm=TRUE)})
        #Momentum
          MOM <- data_Valuation[!is.na(data_Valuation$MOM_F) & data_Valuation$MOM_F=="1",]
          MOM_Valuation <- ddply(MOM,.(Date),function(x){mean(-x$Valuation_ZSCORE,na.rm=TRUE)})
        #Size
          Size <- data_Valuation[!is.na(data_Valuation$Size_F) & data_Valuation$Size_F=="1",]
          Size_Valuation <- ddply(Size,.(Date),function(x){mean(-x$Valuation_ZSCORE,na.rm=TRUE)}) 
        #Growth
          Growth <- data_Valuation[!is.na(data_Valuation$Growth_F) & data_Valuation$Growth_F=="1",]
          Growth_Valuation <- ddply(Growth,.(Date),function(x){mean(-x$Valuation_ZSCORE,na.rm=TRUE)})
        #Volatility
          Volatility <- data_Valuation[!is.na(data_Valuation$Volatility_F) & data_Valuation$Volatility_F=="1",]
          Volatility_Valuation <- ddply(Volatility,.(Date),function(x){mean(-x$Valuation_ZSCORE,na.rm=TRUE)})
        #Combination
          Comb <- data_Valuation[!is.na(data_Valuation$Comb_F) & data_Valuation$Comb_F=="1",]
          Comb_Valuation <- ddply(Comb,.(Date),function(x){mean(-x$Valuation_ZSCORE,na.rm=TRUE)})
        #Historical Valuation Matrix
          ValuationTable <- as.data.frame(Quality_Valuation$Date)
          colnames(ValuationTable)[1]<-"Date"
          ValuationTable$Z_Quality <- Quality_Valuation$V1
          ValuationTable$Z_Value <- Value_Valuation$V1
          ValuationTable$Z_MOM <- MOM_Valuation$V1
          ValuationTable$Z_Size <- Size_Valuation$V1
          ValuationTable$Z_Growth <- Growth_Valuation$V1
          ValuationTable$Z_Volatility <- Volatility_Valuation$V1
        
            melt_VTable <- melt(ValuationTable,measure.vars=c("Z_Volatility","Z_Quality","Z_MOM","Z_Growth","Z_Size","Z_Value"),id.vars ="Date")
            melt_VTable_5Y <- melt(ValuationTable[(nrow(ValuationTable)-49):nrow(ValuationTable),],measure.vars=c("Z_Volatility","Z_Quality","Z_MOM","Z_Growth","Z_Size","Z_Value"),id.vars ="Date")
            #melt_VTable_last <- melt(ValuationTable[nrow(ValuationTable),],measure.vars=c("Z_Volatility","Z_Quality","Z_MOM","Z_Growth","Z_Size","Z_Value"),id.vars ="Date")

          #Rebase Valuation to -1 +1 Range - Full hist
            new_scale = 1-(-1)/(max(melt_VTable$value)-min(melt_VTable$value))
            melt_VTable$rebase_Value <- (melt_VTable$value - min(melt_VTable$value)) * new_scale+(-1)
            melt_VTable_last <- melt_VTable[melt_VTable$Date==max(melt_VTable$Date),]
            
          #Rebase Valuation to -1 +1 Range - 5Y
            new_scale = 1-(-1)/(max(melt_VTable_5Y$value)-min(melt_VTable_5Y$value))
            melt_VTable_5Y$rebase_Value <- (melt_VTable_5Y$value - min(melt_VTable_5Y$value)) * new_scale+(-1)
            melt_VTable_5Ylast <- melt_VTable_5Y[melt_VTable_5Y$Date==max(melt_VTable_5Y$Date),] 
            
            
              ### Export in xlsx
                f_Name <- paste0("EQ_StyleValuation_",ED,".xlsx")
                folder <- "S:/BRUSSELS/MANUFACTURING/COREINVENG/Personal/Julien/15 - Style Valuation/timeSeries/"
                f_Full <- paste0(folder,f_Name)
                  tmp_Vtable <- acast(melt_VTable,Date~variable,value.var="rebase_Value")
                  write.xlsx(x=tmp_Vtable,file=f_Full,sheetName = "Style_HistoricalValuation",row.names = TRUE,append = TRUE)
                
            #Plot current vs Historical Valuation  BOXPLOT
        bp_valuation <- ggplot(colour=melt_VTable_last$variable)+
                          geom_boxplot(data= melt_VTable,aes(x=factor(variable),y=value,fill=variable))+labs(fill="Style")+
                          geom_point(data = melt_VTable_last,aes(x=factor(variable),y=value),colour="red",size=4)+
                          theme(strip.background = element_rect(fill="#085A93"))+
                          theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
                          ggtitle(paste0("Historical Valuation by Style - Current Valuation - (", first_Date, " to: ", last_Date, ")"))+
                          xlab("Factor")+ylab("Value - (Low=Cheap)")+theme(legend.position="none")+
                          theme(plot.title = element_text(size = 13, face = "bold"))+
                          theme(text=element_text(family="Times"))
        
        
            bline_valuation_5Y <- ggplot(colour=melt_VTable_5Ylast$variable)+
                                  geom_line(data= melt_VTable_5Y,aes(x=factor(variable),y=rebase_Value,fill=variable,colour="blue"),size=2)+labs(fill="Style")+
                                  geom_point(shape=3,data = melt_VTable_5Ylast,aes(x=factor(variable),y=rebase_Value),size=4)+
                                  theme(strip.background = element_rect(fill="#085A93"))+
                                  theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
                                  ggtitle(paste0("5Y Historical Valuation by Style - Current Valuation - (", min(melt_VTable_5Y$Date), " to: ", max(melt_VTable_5Y$Date), ")"))+
                                  xlab("Factor")+ylab("Value - (-1: Cheap, +1: Expensive)")+theme(legend.position="none")+
                                  theme(plot.title = element_text(size = 13, face = "bold"))+
                                  theme(text=element_text(family="Times"))
            
              bline_valuation_FP <- ggplot(colour=melt_VTable$variable)+
                                      geom_line(data= melt_VTable,aes(x=factor(variable),y=rebase_Value,fill=variable,colour="blue"),size=2)+labs(fill="Style")+
                                      geom_point(shape=3,data = melt_VTable_last,aes(x=factor(variable),y=rebase_Value),size=4)+
                                      theme(strip.background = element_rect(fill="#085A93"))+
                                      theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
                                      ggtitle(paste0("20Y Historical Valuation by Style - Current Valuation - (", min(melt_VTable$Date), " to: ", max(melt_VTable$Date), ")"))+
                                      xlab("Factor")+ylab("Value - (-1: Cheap, +1: Expensive)")+theme(legend.position="none")+
                                      theme(plot.title = element_text(size = 13, face = "bold"))+
                                      theme(text=element_text(family="Times"))

                hist_valuation <- ggplot(data=melt_VTable,aes(Date,value))+
                                    geom_line(aes(colour=variable))+
                                    facet_grid(~variable)+
                                    ggtitle(paste0("Historical Valuation of factors - (", first_Date, " to: ", last_Date, ")"))+
                                    scale_x_date(date_labels="%y",date_breaks="2 years")+
                                    theme(strip.background = element_rect(fill="#085A93"))+
                                    theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
                                    theme(legend.position="none")+ylab("Valuation ZSCORE")+
                                    theme(plot.title = element_text(size = 13, face = "bold"))+
                                    theme(text=element_text(family="Times"))
        
        
        KDL_Corr <- function(data_KDL){
          
          KDL_Corr <- ddply(data_KDL,~Date,function(x){cor(x$Volatility_Z,-x$Valuation_ZSCORE,method="kendall",use="pairwise")})
          colnames(KDL_Corr)[2]<-"Z_Volatility"
          KDL_Corr$Z_Value <- ddply(data_KDL,~Date,function(x){cor(x$Value_Z,-x$Valuation_ZSCORE,method="kendall",use="pairwise")})[,2]
          KDL_Corr$Z_Quality <- ddply(data_KDL,~Date,function(x){cor(x$Quality_Z,-x$Valuation_ZSCORE,method="kendall",use="pairwise")})[,2]
          KDL_Corr$Z_MOM <- ddply(data_KDL,~Date,function(x){cor(x$MOM_Z,-x$Valuation_ZSCORE,method="kendall",use="pairwise")})[,2]
          KDL_Corr$Z_Size <- ddply(data_KDL,~Date,function(x){cor(x$Size_Z,-x$Valuation_ZSCORE,method="kendall",use="pairwise")})[,2]
          KDL_Corr$Z_Growth <- ddply(data_KDL,~Date,function(x){cor(x$Growth_Z,-x$Valuation_ZSCORE,method="kendall",use="pairwise")})[,2]
          
          melt_KDL <- melt(KDL_Corr,measure.vars=c("Z_Volatility","Z_Quality","Z_MOM","Z_Growth","Z_Size","Z_Value"),id.vars ="Date")
          melt_KDL$variable <- factor(melt_KDL$variable,levels=melt_VTable$variable)
          
          tmp<-data.frame(Mean=colMeans(KDL_Corr[,2:7]),variable=colnames(KDL_Corr[,2:7]))
          
          g_KDL <-  ggplot(data=melt_KDL,aes(x=Date,y=value))+
            geom_line(aes(colour=variable))+
            facet_grid(~variable)+
            geom_hline(data=tmp,aes(yintercept=Mean))+
            scale_x_date(date_labels="%y",date_breaks="2 years")+
            theme(strip.background = element_rect(fill="#085A93"))+
            theme(strip.text.x = element_text(colour = 'white', size = 12,face="bold"))+
            ggtitle("Historical Rank Correlation with Valuation ZSCORE - line=historical average")+
            theme(legend.position="none")+ylab("Rank Correlation with Valuation ZSCORE")+
            theme(plot.title = element_text(size = 13, face = "bold"))+
            theme(text=element_text(family="Times"))
          
        KDL_Corr <- g_KDL       
        }
          g_KDL <- KDL_Corr(data_Valuation)

    historical_Valuation <- list(BP=bp_valuation,HLine=hist_valuation,KDL=g_KDL,bline_5=bline_valuation_5Y,bline_FP=bline_valuation_FP )
    }
        p_Val <- historical_Valuation(data_Valuation=data,ED=endDate)  
      
    ###
    
    
    ###
    ### (7) PLOT GRAPHS
    ### 
        library(grid)
        library(gridExtra)
        
        pdf(paste0("EU_EQ_Style_Valuation_Dispersion ",endDate,".pdf"),width=20,height=14)
        
            p1 <- arrangeGrob(center=textGrob("EQ Style Performance",gp = gpar(fontface = "bold", fontsize = 24)))
          grid.draw(p1)
            print(p_XS$gbar_XS)
            grid.arrange(p_XS$Cum1Y,p_XS$Cum3Y,p_XS$Cum5Y,p_XS$Cum10Y, nrow=2, ncol=2)
            print(p_XS$gline_3M)
            print(p_XS$gline_6M)
        frame() 
            p1 <- arrangeGrob(center=textGrob("EQ Sector Performance",gp = gpar(fontface = "bold", fontsize = 24)))
          grid.draw(p1)
            print(p_XS_Sectors$gbar_XS)
            print(p_XS_Sectors$gline_3M)
            print(p_XS_Sectors$gline_6M)
        frame() 
            p1 <- arrangeGrob(center=textGrob("EQ Country Performance",gp = gpar(fontface = "bold", fontsize = 24)))
          grid.draw(p1)
            print(p_XS_Country$gbar_XS)
            print(p_XS_Country$gline_3M)
            print(p_XS_Country$gline_6M)      
        frame()
            p2 <- arrangeGrob(center=textGrob("EQ Style ETF Net Inflow",gp = gpar(fontface = "bold", fontsize = 24)))
          grid.draw(p2)
        frame()
                value_list <- paste(bdp(value,"NAME")[,1], sep="", collapse=" - ")
                  value_list <- paste0("Value: ",value_list)
                quality_list <- paste(bdp(quality,"NAME")[,1], sep="", collapse=" - ")
                  quality_list <- paste0("Quality: ",quality_list)
                small_list <- paste(bdp(small,"NAME")[,1], sep="", collapse=" - ")
                  small_list <- paste0("Small: ",small_list)
                vol_list <- paste(bdp(vol,"NAME")[,1], sep="", collapse=" - ")
                  vol_list <- paste0("Volatility: ",vol_list)
                mom_list <- paste(bdp(mom,"NAME")[,1], sep="", collapse=" - ")
                  mom_list <- paste0("Momentum: ",mom_list)
                dvd_list <- paste(bdp(dvd,"NAME")[,1], sep="", collapse=" - ")
                  dvd_list <- paste0("Dividend: ",dvd_list)
                growth_list <- paste(bdp(growth,"NAME")[,1], sep="", collapse=" - ")
                  growth_list <- paste0("Growth: ",growth_list)
                
                    ETF_List <- paste(value_list,"\n",quality_list,"\n",small_list,"\n",vol_list,"\n",mom_list,"\n",dvd_list,"\n",growth_list)
    
              g <- arrangeGrob(gg_ETF_Inflow,bottom=textGrob(ETF_List,just ="center", gp = gpar(fontface = "italic", fontsize = 8)))
          grid.draw(g)   
        frame()
            p3 <- arrangeGrob(center=textGrob("EQ Style Factors Dispersion",gp = gpar(fontface = "bold", fontsize = 24)))
          grid.draw(p3)
        frame()
              footnote <- "Size: MarketCap \n Quality: ROA, Value: PER \n Volatility: avg Stdev (6M,1Y,3Y) \n Momentum: 12M1M ROC (%) \n Growth: 1Y FY1FY0 EPS ROC (%)"
              g <- arrangeGrob(p_IQR, bottom = textGrob(footnote,just ="center", gp = gpar(fontface = "italic", fontsize = 10)))
          grid.draw(g)   
        frame()
            p4 <- arrangeGrob(center=textGrob("EQ Style Factors Valuation",gp = gpar(fontface = "bold", fontsize = 24)))
          grid.draw(p4)
          print(p_Val$bline_5)
          print(p_Val$bline_FP)
          #print(p_Val$BP)
          #print(p_Val$HLine)
          print(p_Val$KDL)
        dev.off()
    
